/*
 * This is a minimal example, see extra-examples.cpp for a version
 * with more explantory documentation, example routines, how to 
 * hook up your pixels and all of the pixel types that are supported.
 *
 */

#include "application.h"
#include "neopixel/neopixel.h"

SYSTEM_MODE(AUTOMATIC);

// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_PIN D6
#define PIXEL_COUNT 21
#define PIXEL_TYPE WS2812B

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

uint8_t dawn[ 256 ][ 3 ] = {{0,0,0},{3,2,1},{6,4,2},{9,6,3},{12,8,4},{15,10,5},{18,13,5},{21,15,6},{24,17,7},{27,19,8},{29,21,9},{32,23,10},{35,25,11},{38,27,12},{41,29,13},{44,31,14},{47,33,15},{50,35,15},{53,38,16},{56,40,17},{59,42,18},{62,44,19},{65,46,20},{68,48,21},{71,50,22},{74,52,23},{77,54,24},{80,56,25},{82,58,25},{85,60,26},{88,63,27},{91,65,28},{94,67,29},{97,69,30},{100,71,31},{103,73,32},{106,75,33},{109,77,34},{112,79,35},{115,81,35},{118,83,36},{121,85,37},{124,88,38},{127,90,39},{130,92,40},{133,94,41},{135,96,42},{138,98,43},{141,100,44},{144,102,45},{147,104,45},{150,106,46},{153,108,47},{156,110,48},{159,113,49},{162,115,50},{165,117,51},{168,119,52},{171,121,53},{174,123,54},{177,125,55},{180,127,55},{183,129,56},{186,131,57},{188,133,58},{189,134,59},{190,136,60},{191,137,62},{192,138,63},{192,139,64},{193,141,65},{194,142,66},{195,143,67},{196,144,68},{197,146,69},{198,147,70},{199,148,72},{200,149,73},{201,151,74},{201,152,75},{202,153,76},{203,154,77},{204,155,78},{205,157,79},{206,158,81},{207,159,82},{208,160,83},{209,162,84},{210,163,85},{210,164,86},{211,165,87},{212,167,88},{213,168,89},{214,169,91},{215,170,92},{216,172,93},{217,173,94},{218,174,95},{218,175,96},{219,176,97},{220,178,98},{221,179,99},{222,180,101},{223,181,102},{224,183,103},{225,184,104},{226,185,105},{227,186,106},{227,188,107},{228,189,108},{229,190,110},{230,191,111},{231,193,112},{232,194,113},{233,195,114},{234,196,115},{235,198,116},{236,199,117},{236,200,118},{237,201,120},{238,202,121},{239,204,122},{240,205,123},{241,206,124},{242,207,125},{243,209,126},{244,210,127},{245,211,128},{245,212,129},{245,213,130},{245,213,131},{246,214,132},{246,214,133},{246,215,133},{246,216,134},{246,216,135},{246,217,136},{247,217,136},{247,218,137},{247,219,138},{247,219,139},{247,220,140},{247,221,140},{248,221,141},{248,222,142},{248,222,143},{248,223,143},{248,224,144},{248,224,145},{249,225,146},{249,225,147},{249,226,147},{249,227,148},{249,227,149},{249,228,150},{250,228,150},{250,229,151},{250,230,152},{250,230,153},{250,231,153},{250,231,154},{251,232,155},{251,233,156},{251,233,157},{251,234,157},{251,234,158},{251,235,159},{252,236,160},{252,236,160},{252,237,161},{252,237,162},{252,238,163},{253,239,164},{253,239,164},{253,240,165},{253,241,166},{253,241,167},{253,242,167},{254,242,168},{254,243,169},{254,244,170},{254,244,171},{254,245,171},{254,245,172},{255,246,173},{255,247,174},{255,247,174},{255,248,175},{255,248,176},{255,249,177},{255,250,178},{255,250,178},{255,250,179},{255,250,180},{255,251,181},{255,251,182},{255,251,183},{255,251,184},{255,251,185},{255,251,186},{255,251,187},{255,251,188},{255,251,189},{255,251,190},{255,251,191},{255,251,192},{255,251,193},{255,252,194},{255,252,195},{255,252,196},{255,252,197},{255,252,198},{255,252,199},{255,252,200},{255,252,201},{255,252,202},{255,252,203},{255,252,203},{255,252,204},{255,252,205},{255,252,206},{255,253,207},{255,253,208},{255,253,209},{255,253,210},{255,253,211},{255,253,212},{255,253,213},{255,253,214},{255,253,215},{255,253,216},{255,253,217},{255,253,218},{255,253,219},{255,253,220},{255,254,221},{255,254,222},{255,254,223},{255,254,224},{255,254,225},{255,254,226},{255,254,227},{255,254,228},{255,254,229},{255,254,230},{255,254,231},{255,254,232},{255,254,233},{255,254,234},{255,255,235},{255,255,235},{255,255,236},{255,255,237},{255,255,238},{255,255,239},{255,255,240}};

uint8_t gammaCorrection[ 256 ] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 107, 108, 110, 111, 113, 115, 116, 118, 120, 122, 123, 125, 127, 129, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 175, 177, 179, 181, 184, 186, 188, 191, 193, 195, 198, 200, 202, 205, 207, 210, 212, 215, 217, 220, 222, 225, 227, 230, 233, 235, 238, 241, 243, 246, 249, 252, 255 };

uint8_t applyGammaCorrection( uint8_t input ) {
  return gammaCorrection[ input ];
}

void setup() 
{
  Particle.function("wakeup", wakeup);
  Particle.function("rgbColor", rgbColor);
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

int wakeup( String value ) {
  for(int j=0; j<256; j++) {
    for(int i=0; i<strip.numPixels(); i++) {
        
      int colorIndex = j;
      int gammacolorIndex = applyGammaCorrection( j );
      double distance = abs( i - 10 ) / 10.0;
      int color = distance * gammacolorIndex + ( 1.0 - distance ) * colorIndex;
      
      strip.setPixelColor(i, strip.Color( 
          applyGammaCorrection( dawn[ color ][ 1 ] ), 
          applyGammaCorrection( dawn[ color ][ 0 ] ), 
          applyGammaCorrection( dawn[ color ][ 2 ] )
      ) );
    }
    strip.show();
    delay(7013);
  }
}

int rgbColor(String val) {

    //check if incoming string is empty
    if(val.length() > 0) {

        //if not, use indexOf to find the first comma delimiter
        //this string class has no split command
        //more about indexOf: https://docs.particle.io/reference/firmware/photon/#indexof-
        int i = val.indexOf(",");

        //use substring to get the value from the beginning of the string until the first comma
        //then use toInt to convert from a string to an integer
        //which gets us our first number, the r value
        int r = val.substring(0,i).toInt();

        //more string manipulation to get our g and b values
        int j = val.indexOf(",", i+1);

        int g = val.substring(i+1, j).toInt();

        int b = val.substring(j+1, val.length()).toInt();

        //put it all together and make the LED light up
        for(int i=0; i<strip.numPixels(); i++) {
            strip.setPixelColor( i, strip.Color( applyGammaCorrection( g ), applyGammaCorrection( r ), applyGammaCorrection( b ) ) );
        }
        strip.show();

        //if we're successful return 1
        return 1;
    }
    //something went wrong
    else return -1;
}

void loop() {
}
